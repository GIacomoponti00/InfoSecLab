
# Your task is to write a generic python script capable of extracting a secret key from one execution trace
# (series of page faults) of the binary. For simplicity, we removed all external library calls from the trace. Thus
# the trace only contains page faults in the binary’s executable PT_LOAD segment itself. This also includes the
# .plt section.
# ▶ The traces were generated with ASLR enabled. This implies that the function addresses change across
# different executions. However, the relative position within the segment remains the same.
# ▶ The filename of the trace is equal to the secret key generating it.
# ▶ The page size is 4 KiB.
# ▶ 𝑘 ∈ [1, G − 1]. Where 𝑘 is the private key and |G| the order of the Elliptic Curve 

# The script should be able to extract the secret key from the trace. The key is generated by the following
# algorithm:
# 1. The key is initialized to 0.
# 2. The trace is iterated over in steps of two.
# 3. The address of the current page fault is extracted.
# 4. The page offset is extracted.
# 5. The page number is extracted.
# 6. The address of the next page fault is extracted.
# 7. The page offset of the next page fault is extracted.
# 8. The page number of the next page fault is extracted.
# 9. If the next page fault is in the same page as the current page fault, the difference between the page
# offsets is calculated.
# 10. The difference is added to the key.
# 11. The key is returned. 

# add the correct imports 
import os

def main():
    #traces are in folder traces_daa and the file name is the key
    #load the trace file
    traces_folder = "traces_daa"
    for filename in os.listdir(traces_folder):
        with open(traces_folder + "/" + filename, "r") as file:
            #parse the trace
            trace = file.read().split("\n")
            trace = [int(x) for x in trace if x != "" and x != "0"]
            #extract the key
            key = extract_key(trace)
            print("Key for trace " + filename + ": " + str(key))

def extract_key(trace):
    #initialize the key
    key = 0
    #iterate through the trace
    for i in range(0, len(trace), 2):
        #extract the address
        address = trace[i]
        #extract the page offset
        page_offset = address % 4096
        #extract the page number
        page_number = address // 4096
        #extract the next address
        next_address = trace[i + 1]
        #extract the next page offset
        next_page_offset = next_address % 4096
        #extract the next page number
        next_page_number = next_address // 4096
        
        #check if the next address is in the same page
        if page_number == next_page_number:
            #extract the difference between the two addresses
            difference = next_page_offset - page_offset
            #update the key
            key += difference
    #return the key
    return key



