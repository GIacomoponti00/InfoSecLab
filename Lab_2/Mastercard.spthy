theory Mastercard

begin

//Do not add, change or remove anything (not even comments) in the following two lines.
builtins:  signing
functions: f/2, MAC/2, MACprime/2


/*
Agents that take part in the protocol:
- Card: throughout the model we will identify each card by its number PAN. 
- Terminal
- Issuer
*/


/////////////////////////////////////////////////////
//                     Rules                       //
/////////////////////////////////////////////////////

// ========= Terminal-Issuer Channel ========== //
// Send($A,$B,ch_id,x) indicates that agent $A is sending to agent $B$ a message x on channel ch_id. 
// Recv($A,$B,ch_id,x) indicates that agent $B is receiving from agent $A$ the message x on channel ch_id. 
//Do not add, change or remove anything (not even comments) in the following four lines.
rule Terminal_Issuer_Channel:
    [ Send(Sender, Recipient, channelID, msg) ]
  -->
    [ Recv(Sender, Recipient, channelID, msg) ]


// =========== Application Transaction Counter ==========//
//This rule models the pool of ATCs. 
//Do not add, change or remove anything (not even comments) in the following two lines.
rule Generate_ATC:
    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]

// =============== Card setup ================ //

//This rule initializes a card with a fresh PAN number. 
//This rule also generates a fresh private key for the card and a 
//fresh symmetric key that will be shared with the issuer. 

//Do not add, change or remove anything (not even comments) in the following rule (i.e. in the following nine lines).
rule Create_Card:
    [ Fr(~PAN),//card number
      Fr(~mk),//symmetric key shared with issuer
      Fr(~privkCard)//card's private key
     ] -->
    [ CardCreated(~PAN, $Issuer, ~privkCard),
      !SharedKeyIssuer(~PAN, ~mk, $Issuer),//annotate the issuing bank
      !LtkCard(~PAN, ~privkCard),
      !Pk(~PAN, pk(~privkCard)),
      Out(pk(~privkCard)) ]




/* In the following, we will indicate action facts you need to annotate your rules with.
   The variable names used in the facts are arbitrary, you may of course choose your own names, 
   as long as you refer to the same entities. 
   For example, if we indicate you should annotate a rule with the action fact:
   Compromise_Card(PAN,skey)
   Then an annotation with different variable names: Compromise_Card(~pan, ~sk) is also valid.  */


// ============== Compromise =============== //

/* The following rule should be annotated by the following action facts: 
- Compromise_Card(PAN,skey): indicating that the card numbered PAN got compromised 
                        and its secret key skey was revealed.
*/
rule Compromise_Card:
    /*FILL IN HERE*/
    let 
        skey = f(mk, ATC)
    in 
    [ !SharedKeyIssuer(PAN, mk, Issuer), !ATC(ATC) ]
    --[Compromise_Card(PAN, skey), Compromised(PAN)]-> 
    [ Out(PAN), Out(skey) ]

/* The following rule should be annotated by the following action facts: 
- Compromise_Shared_Key(PAN, Issuer, mk): either the issuer or the card compromised their shared master key mk
*/
rule Compromise_Shared_Key:
    /*FILL IN HERE*/
    [ !SharedKeyIssuer(PAN, Issuer, mk) ]
    --[ Compromise_Shared_Key(PAN, Issuer, mk), Compromised(PAN), Compromised(Issuer) ]-> 
    [ Out(mk) ]

// ============== Read Records ==================== //

//The terminal asks to read the card's records.
//You may model the amount in the PDOL as a public value $amount. 
/* The following rule should be annotated by the following action facts: 
- Terminal_Read_Record($Terminal, $amount, ~un)*/
rule Terminal_Read_Record:
    /*FILL IN HERE*/
    let 
        PDOL = <$amount, ~un> 
    in 
    [ Fr(~un), !ATC(ATC) ]
    --[Terminal_Read_Record($Terminal, $amount, ~un) ]->
    [Out(PDOL), StateT1($Terminal, PDOL, ATC)]

//The card responds with its PAN and the issuing bank. 
/* The following rule should be annotated by the following action facts: 
- Card_Responds_Records(~PAN, $Issuer, PDOL)*/
rule Card_Responds_Records:
    /*FILL IN HERE*/
    let 
        msg = <~PAN, $Issuer>
    in
    [In(PDOL), !SharedKeyIssuer(~PAN, ~mk, $Issuer), !ATC(ATC) ]
    --[ Card_Responds_Records(~PAN, $Issuer, PDOL) ]->
    [ Out(msg), StateC1(~PAN, $Issuer, PDOL, ATC)] 

//The terminal receives the PAN and sends the Internal authenticate command. 
/* The following rule should be annotated by the following action facts: 
- Terminal_Receives_Records($Terminal,$amount, ~un, ~PAN, $Issuer)*/
rule Terminal_Receives_Records:
    /*FILL IN HERE*/
    let 
        Issuer = fst(msg)
        PAN = snd(msg)  
        un = snd(PDOL)
    in    
    [ In(msg), StateT1($Terminal, PDOL, ATC)]
    --[ Terminal_Receives_Records($Terminal, $amount, un, PAN, Issuer) ]-> 
    [ Out('Internal_Authenticate'), StateT2($Terminal, PDOL, PAN, Issuer, ATC) ]

// =========== Data Authentication ============ //

//The card replies with the SDAD. 
/* The following rule should be annotated by the following action facts: 
- Card_Responds_To_InternalAuthenticate(~PAN,$amount, un, ~privKey, ~nc)*/
rule Card_Responds_To_InternalAuthenticate:
    /*FILL IN HERE*/
    let
        amount = fst(PDOL)
        un = snd(PDOL)
        msg = <Issuer, ~nc, un>
        SDAD = sign(msg, privKey)
    in
    [ In('Internal_Authenticate'), 
      Fr(~nc), !LtkCard(PAN, privKey), StateC1(PAN, Issuer, PDOL, ATC) ]
    --[ Card_Responds_To_InternalAuthenticate(PAN, amount, un, privKey, ~nc) ]->
    [ Out(~nc), Out(SDAD), StateC2(PAN, Issuer, PDOL, ~nc, ATC) ]

//The terminal verifies and sends an AC request. 
/* The following rule should be annotated by the following action facts: 
- Terminal_Sends_GenerateAC($Terminal,$amount, ~un, ~PAN, pubKey, ~nc)*/
rule Terminal_Sends_GenerateAC:
    /*FILL IN HERE*/
    let 
        un = snd(PDOL)
        msg = <Issuer, ~nc, un> 
    in
    [ In(~nc), In(SDAD), !Pk(PAN, pubKey), StateT2(Terminal, PDOL, PAN, Issuer, ATC)]
    --[Eq(verify(SDAD, msg, pubKey), true), Terminal_Sends_GenerateAC(Terminal, $amount, un, PAN, pubKey, ~nc) ]-> 
    [ Out('Generate_AC'), StateT3(Terminal, PDOL, PAN, Issuer, ATC) ]

// ============= Application Cryptogram Generation ============ //

//The card replies with the CID, the ATC and the AC. 

/* The following rule should be annotated by the following action facts: 
- Card_Generates_AC(~PAN, $Issuer, mk, ~ATC, PDOL, AC, CID)
- Once(<~PAN, ATC, 'Card'>) : used for the restriction 'once' */
rule Card_Generates_AC:
    /*FILL IN HERE*/
    let 
        sk = f(mk, ATC)
        PDOL = <$amount, un>
        msg = <PDOL, ATC>
        AC = MAC(msg, sk) 
        CID = 'TC'
    in 
    [ In('Generate_AC'), !SharedKeyIssuer(PAN, mk, Issuer), StateC2(PAN, Issuer, PDOL, ~nc, ATC) ] 
    --[ Card_Generates_AC(PAN, Issuer, mk, ATC, PDOL, AC, CID), Once(<PAN, ATC, 'Card'>), 
        CardAuthenticates(PAN, Issuer, <PAN, PDOL, ATC, AC>)]-> 
    [ Out(<CID, ATC, AC>) ]


//Feel free to comment this rule out if you do not need it
/* The following rule should be annotated by the following action facts: 
- Card_Generates_AC(~PAN, $Issuer, mk, ~ATC, PDOL, AC, CID)
- Once(<~PAN, ATC, 'Card'>) : used for the restriction 'once' */
rule Card_Generates_AC_2:
    /*FILL IN HERE*/
    let 
        sk = f(mk, ATC)
        PDOL = <$amount, un>
        msg = <PDOL, ATC>
        AC = MAC(msg, sk) 
        CID = 'ARQC' 
    in 
    [ In('Generate_AC'), !SharedKeyIssuer(PAN, mk, Issuer), !ATC(ATC),  StateC2(PAN, Issuer, PDOL, ~nc, ATC) ]
    --[ Card_Generates_AC(PAN, Issuer, mk, ATC, PDOL, AC, CID), Once(<PAN, ATC, 'Card'>),
        CardAuthenticates(PAN, Issuer, <PAN, PDOL, ATC, AC>) ]-> 
    [ Out(<CID, ATC, AC>) ]



// ============== Offline Authorization ============== //

//If CID = ‘TC′, the Terminal approves the transaction offline.
/* The following rule should be annotated by the following action facts: 
- Terminal_Receives_TC($Terminal, ~PAN, $Issuer, ATC, PDOL, AC)*/
rule Terminal_Receives_TC:
    /*FILL IN HERE*/
    let 
        transaction = <CID, ATC, AC>
    in 
    [ In(<CID, ATC, AC>), StateT3(Terminal, PDOL, PAN, Issuer, ATC)]
    --[ Terminal_Receives_TC(Terminal, PAN, Issuer, ATC, PDOL, AC), Eq(CID, 'TC'), 
        AcceptOffline(Terminal, PAN, <CID, ATC, AC>)]->
    [ ]
// ============== Online Authorization ============== //

//Otherwise the Terminal forwards the request to Issuer for authentication. 
/* The following rule should be annotated by the following action facts: 
- Terminal_Receives_ARQC($Terminal, ~PAN, $Issuer, ATC, PDOL, AC)*/
rule Terminal_Receives_ARQC:
    /*FILL IN HERE*/ 

    [ Fr(~id), In(<CID, ATC_in, AC>), StateT3(Terminal, PDOL, PAN, Issuer, ATC)]
    --[ Eq(ATC_in, ATC),
        Terminal_Receives_ARQC(Terminal, PAN, Issuer, ATC, PDOL, AC),
        TerminalRequests(Terminal, Issuer, PAN, <PAN, PDOL, ATC, AC>) ]->
    [ Send(Terminal, Issuer, <~id, '1'>, <PAN, PDOL, ATC, AC>), StateT4(Terminal, ATC, PDOL, AC, ~id, Issuer, PAN)]


//The issuer authorizes if the AC is correct.
/* The following rule should be annotated by the following action facts: 
- Issuer_Verifies_AC($Issuer,$Terminal,~PAN, ~mk, ATC, PDOL, AC)
- Once(<~PAN, ATC, 'Issuer'>) : used for the restriction 'once' */
rule Issuer_Verifies_AC:
    /*FILL IN HERE*/
    let 
        sk = f(mk, ATC)
        msg = <'Accepted', MACprime(AC, sk)>
    in 
    [Recv(Terminal, Issuer, < id, '1' > , <PAN, PDOL, ATC, AC>), !SharedKeyIssuer(PAN, mk, Issuer), !ATC(ATC) ]
    --[ Issuer_Verifies_AC(Issuer, Terminal, PAN, mk, ATC, PDOL, AC), Once(<PAN, ATC, 'Issuer'>), 
        Eq(AC, MAC(<PDOL, ATC>, sk)),
        IssuerAccepts(Issuer, Terminal, PAN, <PAN, PDOL, ATC, AC>) ]-> 
    [Send(Issuer, Terminal, <id, '2'> , msg)] 

//The terminal can then accept the transaction. 
/* The following rule should be annotated by the following action facts: 
- Terminal_Receives_ARPC($Terminal,~PAN,$Issuer, ATC, PDOL, AC )*/
rule Terminal_Receives_ARPC:
    /*FILL IN HERE*/

     [Recv(Issuer, Terminal, <id, '2'> , msg), StateT4(Terminal, ATC, PDOL, AC, old_id, Issuer, PAN)]
    --[ Terminal_Receives_ARPC(Terminal, PAN, Issuer, ATC, PDOL, AC), 
        AcceptOnline(Terminal, PAN, Issuer, <PAN, PDOL, ATC, AC>), 
        Eq(id, old_id)]-> 
    [ ] 


/////////////////////////////////////////////////////
//                 Restrictions                    //
/////////////////////////////////////////////////////
restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction once: //checks that ATC is different per card session
  "All a #i #j. Once(a)@i & Once(a)@j ==> #i = #j"

////////////////////////////////////////////
//              Sanity Check              //
////////////////////////////////////////////

//Do not add, change or remove anything (not even comments) in the following lemma (i.e. in the following eight lines).
lemma executable_offline:
  exists-trace
  "Ex PAN ter ATC AC PDOL CID mk is #i #j.
    i < j &
    Card_Generates_AC(PAN,is, mk, ATC, PDOL, AC, CID)@i &
    Terminal_Receives_TC(ter, PAN, is, ATC, PDOL, AC)@j &
    not (Ex A #a. Compromised(A)@a) &
    (All p m a p2 a2 c2 i #j. Card_Generates_AC(p,i, m, a, p2, a2, c2)@j ==> #j=#i )"

//Do not add, change or remove anything (not even comments) in the following lemma (i.e. in the following eleven lines).
lemma executable_online:
  exists-trace
  "Ex PAN is ter ATC mk AC PDOL CID #i #j #l #k .
    i < j &
    Card_Generates_AC(PAN, is, mk, ATC, PDOL, AC, CID)@i &
    Terminal_Receives_ARQC(ter, PAN, is, ATC, PDOL, AC)@j &
    j < l &
    Issuer_Verifies_AC(is, ter, PAN, mk, ATC, PDOL, AC)@l &
    Terminal_Receives_ARPC(ter,PAN,is,ATC, PDOL, AC )@k &
    not (Ex A #a. Compromised(A)@a) &
    (All p m a i p2 a2 c2 #j. Card_Generates_AC(p,i, m, a, p2, a2, c2)@j ==> #j=#i )"

/////////////////////////////////////////////////////
//           Security Properties                   //
/////////////////////////////////////////////////////


/*    Start Lemmas    */
// You must write your lemmas within this section, lemmas placed before the previous line will not be graded. 
// Do not modify this line and the previous two lines. 


lemma auth_transaction_offline:
    /*FILL IN HERE*/
//    "All transaction Terminal PAN #i.
//         AcceptOffline(Terminal, PAN, transaction)@i
//         ==> Ex #j. 
//         (#j < #i) & CardAuthenticates(PAN, $Issuer, transaction)@j & 
//         not (Ex #a. Compromised(PAN)@a) & not (Ex #b. Compromised(Issuer)@b)"
"not Ex transaction Terminal PAN #i. 
    AcceptOffline(Terminal, PAN, transaction)@i & 
    not (Ex #a. Compromised(PAN)@a) & not (Ex Issuer #b. Compromised(Issuer)@b) & 
    (not Ex Issuer #j. CardAuthenticates(PAN, Issuer, transaction)@j & (j < i)) "


lemma auth_transaction_online:
/*FILL IN HERE*/
 "All transaction Terminal Issuer PAN #i.
     AcceptOnline(Terminal, PAN, Issuer, transaction)@i 
    & (not Ex #a. Compromised(PAN)@a) & not (Ex #b. Compromised(Issuer)@b)
     ==> Ex #j #k.
     (j < i) & (k < i) &
     CardAuthenticates(PAN, Issuer, transaction)@j &
     IssuerAccepts(Issuer, Terminal, PAN, transaction)@k"

lemma auth_to_issuer:
    /*FILL IN HERE*/
    "All transaction Terminal Issuer PAN #i.
        IssuerAccepts(Issuer, Terminal, PAN, transaction)@i
        & not (Ex #i. Compromised(PAN)@i) & not (Ex #i. Compromised(Issuer)@i)
        ==> Ex #j #k.
        (j < i) & CardAuthenticates(PAN, Issuer, transaction)@j & TerminalRequests(Terminal, Issuer, PAN, transaction)@k & (k < i)"



/*    End Lemmas    */
// Lemmas after this line will not be graded. 
// Do not modify this line and the previous two lines. 


end
